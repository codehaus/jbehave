/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.thoughtworks.jbehave.story.codegen.sablecc.analysis;

import java.util.Hashtable;

import com.thoughtworks.jbehave.story.codegen.sablecc.node.ABenefit;
import com.thoughtworks.jbehave.story.codegen.sablecc.node.AFeature;
import com.thoughtworks.jbehave.story.codegen.sablecc.node.APhrase;
import com.thoughtworks.jbehave.story.codegen.sablecc.node.ARole;
import com.thoughtworks.jbehave.story.codegen.sablecc.node.AScenario;
import com.thoughtworks.jbehave.story.codegen.sablecc.node.AScenarioTitle;
import com.thoughtworks.jbehave.story.codegen.sablecc.node.ASpaceWordOrSpace;
import com.thoughtworks.jbehave.story.codegen.sablecc.node.AStory;
import com.thoughtworks.jbehave.story.codegen.sablecc.node.ATitle;
import com.thoughtworks.jbehave.story.codegen.sablecc.node.AWordWordOrSpace;
import com.thoughtworks.jbehave.story.codegen.sablecc.node.EOF;
import com.thoughtworks.jbehave.story.codegen.sablecc.node.Node;
import com.thoughtworks.jbehave.story.codegen.sablecc.node.Start;
import com.thoughtworks.jbehave.story.codegen.sablecc.node.TAsA;
import com.thoughtworks.jbehave.story.codegen.sablecc.node.TEndl;
import com.thoughtworks.jbehave.story.codegen.sablecc.node.TIWant;
import com.thoughtworks.jbehave.story.codegen.sablecc.node.TScenarioKeyword;
import com.thoughtworks.jbehave.story.codegen.sablecc.node.TSoThat;
import com.thoughtworks.jbehave.story.codegen.sablecc.node.TSpace;
import com.thoughtworks.jbehave.story.codegen.sablecc.node.TTitleKeyword;
import com.thoughtworks.jbehave.story.codegen.sablecc.node.TWord;

public class AnalysisAdapter implements Analysis
{
    private Hashtable in;
    private Hashtable out;

    public Object getIn(Node node)
    {
        if(in == null)
        {
            return null;
        }

        return in.get(node);
    }

    public void setIn(Node node, Object in)
    {
        if(this.in == null)
        {
            this.in = new Hashtable(1);
        }

        if(in != null)
        {
            this.in.put(node, in);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(out == null)
        {
            return null;
        }

        return out.get(node);
    }

    public void setOut(Node node, Object out)
    {
        if(this.out == null)
        {
            this.out = new Hashtable(1);
        }

        if(out != null)
        {
            this.out.put(node, out);
        }
        else
        {
            this.out.remove(node);
        }
    }
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAStory(AStory node)
    {
        defaultCase(node);
    }

    public void caseATitle(ATitle node)
    {
        defaultCase(node);
    }

    public void caseARole(ARole node)
    {
        defaultCase(node);
    }

    public void caseAFeature(AFeature node)
    {
        defaultCase(node);
    }

    public void caseABenefit(ABenefit node)
    {
        defaultCase(node);
    }

    public void caseAScenario(AScenario node)
    {
        defaultCase(node);
    }

    public void caseAScenarioTitle(AScenarioTitle node)
    {
        defaultCase(node);
    }

    public void caseAPhrase(APhrase node)
    {
        defaultCase(node);
    }

    public void caseAWordWordOrSpace(AWordWordOrSpace node)
    {
        defaultCase(node);
    }

    public void caseASpaceWordOrSpace(ASpaceWordOrSpace node)
    {
        defaultCase(node);
    }

    public void caseTTitleKeyword(TTitleKeyword node)
    {
        defaultCase(node);
    }

    public void caseTScenarioKeyword(TScenarioKeyword node)
    {
        defaultCase(node);
    }

    public void caseTAsA(TAsA node)
    {
        defaultCase(node);
    }

    public void caseTIWant(TIWant node)
    {
        defaultCase(node);
    }

    public void caseTSoThat(TSoThat node)
    {
        defaultCase(node);
    }

    public void caseTSpace(TSpace node)
    {
        defaultCase(node);
    }

    public void caseTWord(TWord node)
    {
        defaultCase(node);
    }

    public void caseTEndl(TEndl node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(Node node)
    {
    }
}
