package org.jbehave.scenario.reporters;

import java.io.File;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import freemarker.template.Configuration;
import freemarker.template.ObjectWrapper;
import freemarker.template.Template;
import freemarker.template.TemplateException;

/**
 * Freemarker-based report renderer, using the file outputs generated by the
 * reporters for the given format. The templates for each format is injectable
 * via the {@link FreemarkerReportRender(Properties)} constructor. A renderer
 * for "html" format is provided by default
 * ("org/jbehave/scenario/reporters/html-reports.ftl"). To override, specify the
 * the path the new template under same key "html".
 * 
 * @author Mauro Talevi
 */
public class FreemarkerReportRenderer implements ReportRenderer {

    private final Configuration configuration;
    private final Properties templateResources;

    public FreemarkerReportRenderer() {
        this(defaultTemplateResources());
    }

    private static Properties defaultTemplateResources() {
        Properties resources = new Properties();
        resources.setProperty("html", "org/jbehave/scenario/reporters/html-reports.ftl");
        return resources;
    }

    public FreemarkerReportRenderer(Properties templateResources) {
        this.configuration = configure();
        this.templateResources = mergeWithDefault(templateResources);
    }

    private Properties mergeWithDefault(Properties templateResources) {
        Properties resources = defaultTemplateResources();
        resources.putAll(templateResources);
        return resources;
    }

    public void render(File outputDirectory, String format) {
        String outputName = "index." + format;
        String resource = templateResource(format);
        try {
            Writer writer = new FileWriter(new File(outputDirectory, outputName));
            process(resource, createDataModel(outputDirectory, outputName, format), writer);
        } catch (Exception e) {
            throw new RenderingFailedException(resource, e);
        }

    }

    private Configuration configure() {
        Configuration configuration = new Configuration();
        configuration.setClassForTemplateLoading(FreemarkerReportRenderer.class, "/");
        configuration.setObjectWrapper(ObjectWrapper.BEANS_WRAPPER);
        return configuration;
    }

    /**
     * Processes configured template content with given data model
     * 
     * @param resource the template resource
     * @param dataModel the Map<String, Object> holding the data model
     * @param writer the Writer to output to
     * @throws IOException
     * @throws TemplateException
     */
    private void process(String resource, Map<String, Object> dataModel, Writer writer) throws TemplateException,
            IOException {
        Template template = configuration.getTemplate(resource);
        template.process(dataModel, writer);
    }

    private String templateResource(String format) {
        String resource = templateResources.getProperty(format);
        if (resource == null) {
            throw new RendererTemplateNotFoundException(format);
        }
        return resource;
    }

    /**
     * Creates a Freemarker data model, containing the reports from the output
     * directory of a given format
     * 
     * @param outputDirectory
     * @param outputName
     * @param format
     * @return A Map<String, Object>
     */
    private Map<String, Object> createDataModel(File outputDirectory, final String outputName, final String format) {
        Map<String, Object> dataModel = new HashMap<String, Object>();
        dataModel.put("reports", reportsFrom(outputDirectory, outputName, format));
        dataModel.put("publishedDate", new Date());
        return dataModel;
    }

    private List<File> reportsFrom(File outputDirectory, final String outputName, final String format) {
        String[] reportNames = outputDirectory.list(new FilenameFilter() {
            public boolean accept(File dir, String name) {
                return !name.equals(outputName) && name.endsWith(format);
            }
        });
        List<File> reports = new ArrayList<File>();
        for (String name : reportNames) {
            reports.add(new File(outputDirectory, name));
        }
        return reports;
    }

    @SuppressWarnings("serial")
    public class RenderingFailedException extends RuntimeException {

        public RenderingFailedException(String resource, Exception cause) {
            super("Failed rendering report with resource " + resource, cause);
        }

    }

    @SuppressWarnings("serial")
    public class RendererTemplateNotFoundException extends RuntimeException {

        public RendererTemplateNotFoundException(String format) {
            super("Renderer template not found for format " + format);
        }

    }

}
