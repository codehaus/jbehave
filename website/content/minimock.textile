-------------------------------------------------------
Minimock
-------------------------------------------------------
h1(FirstChild). Two minute tutorial

Minimock is exactly what it sounds like - a super-lightweight mocking library
with a very similar feel to jmock. Of course if minimock is too light weight for you, we
also have an extension for "jMock":how-to-use-with-jmock.html

h2. How do I use Minimock

It's easy! Simply create a Behaviour Class that extends <tt>UsingMiniMock</tt>.
<tt>UsingMiniMock</tt> provides a bunch of "sugar" methods for use when creating mocks
and setting up expectations.

You create a <tt>Mock</tt> by using the <tt>mock(Class)</tt> method. You can then set expectations
on the mock in much the same way as you can with jMock, though minimock does provide some useful shortcuts.
At the end of your behaviour you call <tt>verifyMocks()</tt> to verify that all expectations have been met.

For example:

<div class="Shaded"><pre>
public class SterlingCurrencyConverterBehaviour extends UsingMiniMock {
	private CurrencyConverter sterlingConverter;
	private Mock exchangeRateServiceMock;

	public void setUp() {
		exchangeRateServiceMock = mock(ExchangeRateService.class);
		sterlingConverter = new SterlingCurrencyConverter((ExchangeRateService)exchangeRateServiceMock);
	}

	public void shouldConvertToUSD() throws Exception {
		// expect
		exchangeRateServiceMock.expects("retrieveRate").
				with(eq(Currency.USD)).
				will(returnValue(new ExchangeRate(1.85, 0.54)));

		// execute
		double convertedAmount = sterlingConverter.convertFromSterling(10.0, Currency.USD);

		// verify
		Verify.equal(18.50, convertedAmount, 0);
		verifyMocks();
	}
}
</pre></div>

h2. Some useful features

* By default minimock stubs all method calls and will return reasonable defaults
* <tt>mock.expects("fooMethod")</tt> will allow calls to fooMethod with any, or no, arguments.
